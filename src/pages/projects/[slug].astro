---
import { type CollectionEntry, getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import ProjectPreview from '../../components/ProjectPreview.astro';
import Button from '../../components/Button.astro';
import { sortItemsByDateDesc, getAllTags, getTagObjects } from '../../utils/data-utils';

export async function getStaticPaths() {
    const projects = (await getCollection('projects')).sort(sortItemsByDateDesc);
    const projectCount = projects.length;
    return projects.map((project, index) => ({
        params: { slug: project.slug },
        props: {
            project,
            prevProject: index + 1 !== projectCount ? projects[index + 1] : null,
            nextProject: index !== 0 ? projects[index - 1] : null
        }
    }));
}

type Props = { project: CollectionEntry<'projects'>; prevProject: CollectionEntry<'projects'>; nextProject: CollectionEntry<'projects'> };

const { project, prevProject, nextProject } = Astro.props;
const { title, description, tags = [], projectUrl, sourceUrl, seo } = project.data;
const { Content } = await project.render();

// 태그 정보 가져오기
const allProjects = await getCollection('projects');
const allBlogs = await getCollection('blog');
const allContent = [...allProjects, ...allBlogs];
const allTags = getAllTags(allContent);
const projectTags = getTagObjects(tags, allTags);
---

<BaseLayout title={seo?.title ?? title} description={seo?.description ?? description} image={seo?.image} pageType="article" showHeader={false}>
    <article class="mb-16 sm:mb-24">
        <header class="mb-8">
            <h1 class="text-3xl leading-tight font-serif font-medium sm:text-5xl sm:leading-tight">{title}</h1>

            {
                projectTags.length > 0 && (
                    <div class="flex flex-wrap gap-2 mt-4">
                        {projectTags.map((tag) => (
                            <a
                                href={`/tags/${tag.slug}`}
                                class="inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium transition-all hover:opacity-80"
                                style={`background-color: ${tag.color}20; color: ${tag.color};`}
                            >
                                {tag.name}
                            </a>
                        ))}
                    </div>
                )
            }

            {
                (projectUrl || sourceUrl) && (
                    <div class="flex flex-wrap gap-4 mt-6">
                        {projectUrl && (
                            <Button href={projectUrl} target="_blank" rel="noopener noreferrer">
                                프로젝트 보기
                            </Button>
                        )}
                        {sourceUrl && (
                            <Button href={sourceUrl} target="_blank" rel="noopener noreferrer">
                                소스 코드
                            </Button>
                        )}
                    </div>
                )
            }
        </header>
        <div class="max-w-none prose prose-dante sm:prose-lg">
            <Content />
        </div>
    </article>
    {
        (prevProject || nextProject) && (
            <div class="my-16 sm:my-24">
                <h2 class="mb-12 text-xl font-serif italic sm:mb-16 sm:text-2xl">다른 프로젝트</h2>
                {nextProject && <ProjectPreview project={nextProject} class="mb-10 sm:mb-12" headingLevel="h3" />}
                {prevProject && <ProjectPreview project={prevProject} class="mb-10 sm:mb-12" headingLevel="h3" />}
            </div>
        )
    }
</BaseLayout>
